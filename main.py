from datetime import date

from aiogram import Bot, Dispatcher, executor, types
import asyncio
import logging
import json
import random
from datetime import datetime

from aiogram.types import ContentType

from Keyboards import InlineKeyboards
from Keyboards import ReplyKeyboards
from utils import get_call_data_form

# –£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–æ–≤ –∏ –∏—Ö –≤—ã–≤–æ–¥
logging.basicConfig(format=u'%(filename)s[LINE:%(lineno)d]# %(levelname)-8s [%(asctime)s]  %(message)s',
                    level=logging.INFO)

# –ß—Ç–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
with open(r'data\config.txt', 'r') as file:
    config = json.load(file)

# –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –ë–æ—Ç–∞
bot = Bot(config['token'])
dp = Dispatcher(bot)


async def check_subs_on_channel():
    while True:
        users = session.query(User).filter(User.user_state == 0).all()
        if users:
            for user in users:
                res = await bot.get_chat_member(-1001653709784, user.id_telegram)
                if res.status in ['member', 'creator']:
                    user.user_state = 1
                    if user.is_resubscribe:
                        user.is_resubscribe = False
                        user.user_state = 2
                        text = f'–£—Ä–∞! –í—ã —Å–Ω–æ–≤–∞ —Å –Ω–∞–º–∏!'
                        await bot.delete_message(chat_id=user.id_telegram, message_id=user.start_msg)
                        await bot.send_message(chat_id=user.id_telegram, text=text)
                        continue
                    await bot.delete_message(chat_id=user.id_telegram, message_id=user.start_msg)
                    text, keyboard = InlineKeyboards.fill_form_start()
                    await bot.send_message(chat_id=user.id_telegram, text=text, reply_markup=keyboard)
            session.commit()
        users = session.query(User).filter(User.user_state == 2).all()
        if users:
            for user in users:
                res = await bot.get_chat_member(-1001653709784, user.id_telegram)
                if res.status not in ['member', 'creator']:
                    user.user_state = 0
                    user.is_resubscribe = True
                    text = '–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª, —á—Ç–æ–±—ã –≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –ë–æ—Ç–æ–º'
                    keyboard = InlineKeyboards.hello_msg()
                    msg = await bot.send_message(chat_id=user.id_telegram, text=text, reply_markup=keyboard)
                    msg_id = msg.message_id
                    user.start_msg = msg_id
                    session.commit()

        await asyncio.sleep(5)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã '/start'
@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    is_user_exist = session.query(User).filter_by(id_telegram=message.from_user.id).first()
    if not is_user_exist:
        new_user = User(message.from_user.username, message.from_user.id)
        session.add(new_user)

        text = '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n–î–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –ë–æ—Ç–æ–º –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ:'
        keyboard = InlineKeyboards.hello_msg()
        msg = await bot.send_message(chat_id=message.from_user.id, text=text, reply_markup=keyboard)
        msg_id = msg.message_id
        new_user.start_msg = msg_id


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–Ω–ª–∞–π–Ω –∞–Ω–∫–µ—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
@dp.callback_query_handler(lambda call: call.data in get_call_data_form()[1])
async def fill_form_call_logic(call: types.CallbackQuery):
    user = session.query(User).filter_by(id_telegram=call.from_user.id).first()
    if user.user_state != 1:
        return

    form_separately = get_call_data_form()[0]
    form = form_separately[0]
    form_first_lst = form_separately[1]
    form_second_lst = form_separately[2]
    form_third_lst = form_separately[3]

    if call.data == form:
        await call.message.delete()
        text, keyboard = InlineKeyboards.choice_words_count()
        await call.message.answer(text=text, reply_markup=keyboard)

    elif call.data in form_first_lst:
        user = session.query(User).filter_by(id_telegram=call.from_user.id).first()
        user.words_count_learn = call.data
        session.commit()

        await call.message.delete()
        text, keyboard = InlineKeyboards.choice_level_english()
        await call.message.answer(text=text, reply_markup=keyboard)

    elif call.data in form_second_lst:
        user = session.query(User).filter_by(id_telegram=call.from_user.id).first()
        user.level_english_user = call.data
        session.commit()

        await call.message.delete()
        text, keyboard = InlineKeyboards.choice_participate_rankings()
        await call.message.answer(text=text, reply_markup=keyboard)

    elif call.data in form_third_lst:
        user = session.query(User).filter_by(id_telegram=call.from_user.id).first()
        user.user_state = 2
        user.is_table_rating = True if call.data == 'yes_rates' else False
        session.commit()

        await call.message.delete()
        text = f'–ê–Ω–∫–µ—Ç–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞.\n' \
               f'–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–æ—Ç–æ–º.'
        await call.message.answer(text=text, reply_markup=ReplyKeyboards.get_start_keyboard())


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —Å–ª–æ–≤
@dp.callback_query_handler(lambda call: call.data == 'learn')
async def learn_words_call_logic(call: types.CallbackQuery):
    user = session.query(User).filter_by(id_telegram=call.from_user.id).first()
    if user.user_state != 2:
        return

    await call.message.delete()

    user = session.query(User).filter_by(id_telegram=call.from_user.id).first()
    current_words_to_learn = user.current_words_to_learn

    current_lst = []
    for lst in current_words_to_learn['current']:
        if lst[4] == 0 or lst[4] == 3:
            current_lst = lst
            break
    if not current_lst:
        text = f'–°–ª–æ–≤–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å\n' \
               f'–ì–æ—Ç–æ–≤—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç?'
        keyboard = InlineKeyboards.learn_words_continue('–ü–æ–≥–Ω–∞–ª–∏ üèÉ')
        await bot.send_message(chat_id=call.from_user.id, text=text, reply_markup=keyboard)

        lst_to_random = sorted(current_words_to_learn['current'], key=lambda a: random.random())
        user.current_words_to_learn = {'current': lst_to_random}

        # –ò–∑–º–µ–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ 1
        user.today_words_str_state = 1
        session.commit()

        return

    word = current_lst[0]
    transcription = current_lst[1]
    translation = current_lst[2]
    audio = current_lst[3]
    # word_state = current_lst[4]
    text = f'<b>{word}</b>\n' \
           f'{transcription}\n\n' \
           f'{translation}'
    keyboard = InlineKeyboards.learn_words()
    await bot.send_voice(chat_id=call.from_user.id, voice=audio, caption=text, reply_markup=keyboard,
                         parse_mode='html')

    current_lst[4] = 1
    session.commit()
    user.current_words_to_learn = current_words_to_learn
    session.commit()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –ø–µ—Ä–µ–≤–æ–¥–∞
@dp.callback_query_handler(lambda call: call.data == 'learn_continue')
async def translate_words_call_logic(call: types.CallbackQuery):
    user = session.query(User).filter_by(id_telegram=call.from_user.id).first()
    if user.user_state != 2:
        return

    await call.message.delete()

    user = session.query(User).filter_by(id_telegram=call.from_user.id).first()
    current_words_to_learn = user.current_words_to_learn

    current_lst = []
    for lst in current_words_to_learn['current']:
        if lst[4] == 1:
            current_lst = lst
            break
    if not current_lst:
        right = 0
        incorrect = 0
        text = f'–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç üë®‚Äçüíª ({date.today()})\n\n'
        for lst in current_words_to_learn['current']:
            if lst[4] == 2:
                text += f'‚úÖ {lst[0]} - {lst[2]}\n'
                right += 1
            if lst[4] == 3:
                text += f'‚ùå {lst[0]} - {lst[2]}\n'
                incorrect += 1
        if incorrect == 0:
            text += f'\n–í–∞—É –∫—Ä—É—Ç–æ üî•\n' \
                    f'–¢—ã —Å–ø—Ä–∞–≤–∏–ª—Å—è, –º–æ–ª–æ–¥–µ—Ü!'
        elif right >= incorrect:
            text += f'\n–ú–æ–ª–æ–¥–µ—Ü!\n' \
                    f'–ù–æ —Ç–µ–±–µ –µ—â–µ –µ—Å—Ç—å —á–µ–º—É –ø–æ—É—á–∏—Ç—å—Å—è'
        else:
            text += f'\n–ù–µ —É–Ω—ã–≤–∞–π! –ë–æ–ª—å—à–µ –ø—Ä–∞–∫—Ç–∏–∫—É–π—Å—è!'

        await bot.send_message(chat_id=call.from_user.id, text=text)

        user.current_words_to_learn = current_words_to_learn

        # –ò–∑–º–µ–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ 2
        user.today_words_str_state = 2
        # –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å–ª–æ–≤ –≤ –ë–î, –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–µ—Ä–Ω—ã—Ö/–Ω–µ–≤–µ—Ä–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
        user_level = user.level_english_user
        user_words_dict = {'A1': user.A1_words,
                           'A2': user.A2_words,
                           'B1': user.B1_words,
                           'B2': user.B2_words,
                           'C': user.C_words}
        user_words = user_words_dict[user_level]

        for lst in current_words_to_learn['current']:
            if lst[4] == 2:  # –í–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç
                user_words[lst[0]][4] = 2
            elif lst[4] == 3:  # –ù–µ –≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç
                user_words[lst[0]][4] = 3

        session.commit()
        if user_level == 'A1':
            user.A1_words = user_words
        elif user_level == 'A2':
            user.A2_words = user_words
        elif user_level == 'B1':
            user.B1_words = user_words
        elif user_level == 'B2':
            user.B2_words = user_words
        elif user_level == 'C':
            user.C_words = user_words
        session.commit()

        return

    word = current_lst[0]
    transcription = current_lst[1]
    translate = current_lst[2]
    # word_state = current_lst[4]

    text = f'<b>{word}</b>\n' \
           f'{transcription}'

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–∑ –ë–î
    current_words_to_learn_check = user.current_words_to_learn_check['current_check']
    # –†–∞–Ω–¥–æ–º–Ω–æ –≤—ã–±–∏—Ä–∞–µ–º 3 —Å–ª–æ–≤–∞ (–∞ –≤—Å–µ–≥–æ –∏—Ö –±—É–¥–µ—Ç 4)
    three_words_to_check = sorted(current_words_to_learn_check,
                                  key=lambda a: random.random())[0:3]
    three_words_to_check.append(translate)
    four_words_to_check = sorted(three_words_to_check,
                                 key=lambda a: random.random())
    keyboard = InlineKeyboards.check_learn_word(*four_words_to_check)
    await bot.send_message(chat_id=call.from_user.id, text=text, reply_markup=keyboard, parse_mode='html')

    # –ó–∞–ø–∏—Å—å –≤ –ë–î 4 —Ç–µ–∫—É—â–∏—Ö —Å–ª–æ–≤–∞, —á—Ç–æ –±—ã–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —é–∑–µ—Ä—É, –∫–∞–∫ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–∞
    user.current_4lst_check = {'current_4lst_check': [*four_words_to_check],
                               'current_word': [word, transcription, translate]}
    session.commit()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–µ—Ä–Ω–æ–≥–æ/–Ω–µ–≤–µ—Ä–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞
@dp.callback_query_handler(lambda call: call.data in session.query(User).
                           filter_by(id_telegram=call.from_user.id).
                           first().current_4lst_check['current_4lst_check'])
async def choice_right_incorrect_translate(call: types.CallbackQuery):
    user = session.query(User).filter_by(id_telegram=call.from_user.id).first()
    if user.user_state != 2:
        return

    await call.message.delete()

    user = session.query(User).filter_by(id_telegram=call.from_user.id).first()
    current_words_to_learn = user.current_words_to_learn
    current_4lst_check = user.current_4lst_check

    word = current_4lst_check['current_word'][0]
    transcription = current_4lst_check['current_word'][1]
    translate_true = current_4lst_check['current_word'][2]

    text = f'<b>{word}</b>\n' \
           f'{transcription}\n\n'

    is_right = False
    if call.data == translate_true:
        text += f'–í–µ—Ä–Ω–æ ‚úÖ'
        is_right = True
    else:
        text += f'–ù–µ–≤–µ—Ä–Ω–æ ‚ùå\n' \
                f'–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç - {translate_true}'

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤–µ—Ä–Ω—ã—Ö/–Ω–µ–≤–µ—Ä–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –∏ –ø—Ä–∏–±–∞–≤–ª—è–µ–º –æ—á–∫–∏ –∑–∞ –∫–∞–∂–¥—ã–π –≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç
    lvl_english = user.level_english_user
    is_table_rating = user.is_table_rating
    for lst in current_words_to_learn['current']:
        if lst[0] == word:
            if is_right:  # –í–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç
                lst[4] = 2
                if is_table_rating:  # –ü—Ä–∏–±–∞–≤–ª—è–µ–º –æ—á–∫–∏ –∑–∞ –≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç
                    if lvl_english == 'A1':
                        user.score_table_rating += 0.5
                    elif lvl_english == 'A2':
                        user.score_table_rating += 1.0
                    elif lvl_english == 'B1':
                        user.score_table_rating += 1.5
                    elif lvl_english == 'B2':
                        user.score_table_rating += 2.0
                    elif lvl_english == 'C':
                        user.score_table_rating += 2.5
                    session.commit()
            else:  # –ù–µ –≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç
                lst[4] = 3
            break
    session.commit()
    user.current_words_to_learn = current_words_to_learn
    session.commit()
    keyboard = InlineKeyboards.learn_words_continue('–î–∞–ª–µ–µ üôá‚Äç‚ôÇÔ∏è')
    await bot.send_message(chat_id=call.from_user.id, text=text, reply_markup=keyboard, parse_mode='html')


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∞–Ω–∫–µ—Ç—ã
@dp.callback_query_handler(lambda call: call.data in ['lvl_english_change',
                                                      'words_count_change',
                                                      'table_rating_change',
                                                      'change_form_close'])
async def change_form(call: types.CallbackQuery):
    user = session.query(User).filter_by(id_telegram=call.from_user.id).first()
    if user.user_state != 2:
        return

    await call.message.delete()

    if call.data == 'lvl_english_change':
        text, keyboard = InlineKeyboards.change_form_lvl_english()
        await bot.send_message(chat_id=call.from_user.id, text=text, reply_markup=keyboard)
    elif call.data == 'words_count_change':
        text, keyboard = InlineKeyboards.change_form_words_count_learn()
        await bot.send_message(chat_id=call.from_user.id, text=text, reply_markup=keyboard)
    elif call.data == 'table_rating_change':
        text, keyboard = InlineKeyboards.change_form_table_rating()
        await bot.send_message(chat_id=call.from_user.id, text=text, reply_markup=keyboard)
    elif call.data == 'change_form_close':
        text = '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ ‚úÖ'
        await bot.send_message(chat_id=call.from_user.id, text=text)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞
@dp.callback_query_handler(lambda call: call.data in ['A1_change',
                                                      'A2_change',
                                                      'B1_change',
                                                      'B2_change',
                                                      'C_change'])
async def change_form_lvl_engl(call: types.CallbackQuery):
    user = session.query(User).filter_by(id_telegram=call.from_user.id).first()
    if user.user_state != 2:
        return

    await call.message.delete()

    user = session.query(User).filter_by(id_telegram=call.from_user.id).first()
    if call.data == 'A1_change':
        user.level_english_user = 'A1'
    elif call.data == 'A2_change':
        user.level_english_user = 'A2'
    elif call.data == 'B1_change':
        user.level_english_user = 'B1'
    elif call.data == 'B2_change':
        user.level_english_user = 'B2'
    elif call.data == 'C_change':
        user.level_english_user = 'C'
    session.commit()

    text, keyboard = InlineKeyboards.change_form()
    await bot.send_message(chat_id=call.from_user.id, text=text, reply_markup=keyboard)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏–∑—É—á–∞–µ–º—ã—Ö —Å–ª–æ–≤
@dp.callback_query_handler(lambda call: call.data in ['3_change',
                                                      '4_change',
                                                      '5_change'])
async def change_form_words_count(call: types.CallbackQuery):
    user = session.query(User).filter_by(id_telegram=call.from_user.id).first()
    if user.user_state != 2:
        return

    await call.message.delete()

    user = session.query(User).filter_by(id_telegram=call.from_user.id).first()
    if call.data == '3_change':
        user.words_count_learn = 3
    elif call.data == '4_change':
        user.words_count_learn = 4
    elif call.data == '5_change':
        user.words_count_learn = 5
    session.commit()

    text, keyboard = InlineKeyboards.change_form()
    await bot.send_message(chat_id=call.from_user.id, text=text, reply_markup=keyboard)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —É—á–∞—Å—Ç–∏—è –≤ —Ç–∞–±–ª–∏—Ü–µ —Ä–µ–π—Ç–∏–Ω–≥–∞
@dp.callback_query_handler(lambda call: call.data in ['yes_rates_change',
                                                      'no_rates_change'])
async def change_form_table_rati(call: types.CallbackQuery):
    user = session.query(User).filter_by(id_telegram=call.from_user.id).first()
    if user.user_state != 2:
        return

    await call.message.delete()

    user = session.query(User).filter_by(id_telegram=call.from_user.id).first()
    if call.data == 'yes_rates_change':
        user.is_table_rating = True
    elif call.data == 'no_rates_change':
        user.is_table_rating = False
    session.commit()

    text, keyboard = InlineKeyboards.change_form()
    await bot.send_message(chat_id=call.from_user.id, text=text, reply_markup=keyboard)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü –≤ —Ç–∞–±–ª–∏—Ü–µ —Ä–µ–π—Ç–∏–Ω–≥–∞
@dp.callback_query_handler(lambda call: '_tablerating' in call.data)
async def change_page_table_rating(call: types.CallbackQuery):
    user = session.query(User).filter_by(id_telegram=call.from_user.id).first()
    if user.user_state != 2:
        return

    await call.message.delete()

    users = session.query(User).order_by(User.score_table_rating.desc()).all()
    user = session.query(User).filter_by(id_telegram=call.from_user.id).first()
    is_current_user = user.user_name

    page = call.data.split('_')[0]
    first_pg = 0
    second_pg = 0
    next_page = call.data.split('_')[1]
    if next_page == 'before':
        if page == '1':
            first_pg = 1
            second_pg = int(page) + 1
        else:
            first_pg = int(page) - 1
            second_pg = int(page) + 1
    elif next_page == 'after':
        first_pg = int(page) - 1
        second_pg = int(page) + 1
    text, keyboard = InlineKeyboards.table_rating_output(first_pg=first_pg,
                                                         second_pg=second_pg,
                                                         is_current_user=is_current_user,
                                                         users=users)
    # –î–∞–ª–µ–µ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    await bot.send_message(chat_id=call.from_user.id, text=text, reply_markup=keyboard)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ —Ç–∞–±–ª–∏—Ü—ã —Ä–µ–π—Ç–∏–Ω–≥–∞
@dp.callback_query_handler(lambda call: call.data == 'close_table_rating')
async def close_table_rating(call: types.CallbackQuery):
    user = session.query(User).filter_by(id_telegram=call.from_user.id).first()
    if user.user_state != 2:
        return

    await call.message.delete()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫ –æ–ø–ª–∞—Ç–µ –ø–æ–¥–ø–∏—Å–∫–∏
@dp.pre_checkout_query_handler(lambda query: True)
async def pre_checkout_query_handler(pre_checkout_q: types.PreCheckoutQuery):
    user = session.query(User).filter_by(id_telegram=pre_checkout_q.from_user.id).first()
    if user.user_state != 2:
        return

    await bot.answer_pre_checkout_query(pre_checkout_query_id=pre_checkout_q.id, ok=True)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
@dp.message_handler(content_types=ContentType.SUCCESSFUL_PAYMENT)
async def successful_payment(message: types.Message):
    user = session.query(User).filter_by(id_telegram=message.from_user.id).first()
    if user.user_state != 2:
        return

    print('SUCCESSFUL PAYMENT:')
    payment_info = message.successful_payment.to_python()
    for k, v in payment_info.items():
        print(f'{k} = {v}')

    text = f'–ü–ª–∞—Ç–µ–∂ –Ω–∞ —Å—É–º–º—É {message.successful_payment.total_amount // 100}' \
           f'{message.successful_payment.currency} –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ'
    await bot.send_message(chat_id=message.from_user.id,
                           text=text)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ç–∞—Ä—Ç–æ–≤–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
@dp.message_handler(text=ReplyKeyboards.buttons_start)
async def hello(message: types.Message):
    user = session.query(User).filter_by(id_telegram=message.from_user.id).first()
    if user.user_state != 2:
        return

    if message.text == '–£—á–∏—Ç—å —Å–ª–æ–≤–∞ üìñ':
        user = session.query(User).filter_by(id_telegram=message.from_user.id).first()
        today_words_str = user.today_words_str

        # –ü—Ä–æ–≤–µ—Ä–∫–∞, –±—ã–ª –ª–∏ —É–∂–µ –ø–æ–ª—É—á–µ–Ω —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
        today_date_str = datetime.now().strftime("%Y-%m-%d")
        if today_date_str != today_words_str:
            user.today_words_str = datetime.now().strftime("%Y-%m-%d")
            user.today_words_str_state = 0
            session.commit()
        today_words_str_state = user.today_words_str_state
        if today_words_str_state == 1:
            text = f'–í—ã —Ä–∞–Ω–µ–µ –ø–æ–ª—É—á–∏–ª–∏ —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è\n' \
                   f'–ì–æ—Ç–æ–≤—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏ –≤—ã–±—Ä–∞—Ç—å –≤–µ—Ä–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —Å–ª–æ–≤–∞?'
            keyboard = InlineKeyboards.learn_words_continue('–ü–æ–≥–Ω–∞–ª–∏ üèÉ')
            await bot.send_message(chat_id=message.from_user.id, text=text, reply_markup=keyboard)
            return
        elif today_words_str_state == 2:
            text = f'–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –≤ –∏–∑—É—á–µ–Ω–∏–∏ —Å–ª–æ–≤ üôà\n' \
                   f'–í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å –∑–∞–≤—Ç—Ä–∞ üïë'
            await bot.send_message(chat_id=message.from_user.id, text=text)
            return

        user_level = user.level_english_user
        user_words_count_learn = user.words_count_learn
        user_words_dict = {'A1': user.A1_words,
                           'A2': user.A2_words,
                           'B1': user.B1_words,
                           'B2': user.B2_words,
                           'C': user.C_words}
        user_words = user_words_dict[user_level]
        # –°–ª–æ–≤–∞—Ä—å –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –Ω–æ–≤—ã—Ö —Å–ª–æ–≤ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è
        current_words_to_learn = {'current': []}
        for lst in user_words.values():
            if len(current_words_to_learn['current']) == user_words_count_learn:
                break
            if lst[4] == 3:
                current_words_to_learn['current'].append(lst)
        if len(current_words_to_learn['current']) < user_words_count_learn:
            sorted_words = sorted(user_words.values(), key=lambda a: random.random())
            for lst in sorted_words:
                if len(current_words_to_learn['current']) == user_words_count_learn:
                    break
                if lst[4] == 0:
                    current_words_to_learn['current'].append(lst)

        # –ï—Å–ª–∏ –Ω–æ–≤—ã—Ö —Å–ª–æ–≤ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –Ω–µ—Ç, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π —É—Ä–æ–≤–µ–Ω—å –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ
        if not len(current_words_to_learn['current']):
            text = f'–í—ã —É—Å–ø–µ—à–Ω–æ –∏–∑—É—á–∏–ª–∏ –≤—Å–µ —Å–ª–æ–≤–∞ —Ç–µ–∫—É—â–µ–≥–æ —É—Ä–æ–≤–Ω—è\n' \
                   f'–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π —á–µ—Ä–µ–∑ –º–µ–Ω—é!'
            await bot.send_message(chat_id=message.from_user.id, text=text)
            return

        # –°–ª–æ–≤–∞—Ä—å –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–≤—ã—Ö –∏–∑—É—á–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤
        current_words_to_learn_check = {'current_check': []}
        for lst in user_words.values():
            current_words_to_learn_check['current_check'].append(lst[2])

        # –ó–∞–ø–∏—Å—å —Å–ø–∏—Å–∫–∞ —Å–ª–æ–≤ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –≤ PostgreSQL
        user.current_words_to_learn = current_words_to_learn
        # –ó–∞–ø–∏—Å—å —Å–ø–∏—Å–∫–∞ —Å–ª–æ–≤ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
        user.current_words_to_learn_check = current_words_to_learn_check
        session.commit()

        text = f'–í—ã –ø–æ–ª—É—á–∏—Ç–µ —Å–ª–æ–≤–∞ –¥–ª—è –∑–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è!\n' \
               f'–ñ–º–∏—Ç–µ > <b>–£—á–∏—Ç—å</b>'

        keyboard = types.InlineKeyboardMarkup(row_width=1)
        one = types.InlineKeyboardButton(text='–£—á–∏—Ç—å',
                                         callback_data='learn')
        keyboard.add(one)
        await bot.send_message(chat_id=message.from_user.id, text=text, parse_mode='html', reply_markup=keyboard)

    elif message.text == '–ò–∑–º–µ–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É üìù':
        text, keyboard = InlineKeyboards.change_form()
        await bot.send_message(chat_id=message.from_user.id, text=text, reply_markup=keyboard)

    elif message.text == '–¢–∞–±–ª–∏—Ü–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞ üìä':
        users = session.query(User).order_by(User.score_table_rating.desc()).all()
        user = session.query(User).filter_by(id_telegram=message.from_user.id).first()
        is_current_user = user.user_name
        first_pg = 1
        second_pg = 2
        text, keyboard = InlineKeyboards.table_rating_output(first_pg=first_pg,
                                                             second_pg=second_pg,
                                                             is_current_user=is_current_user,
                                                             users=users)
        # –î–∞–ª–µ–µ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        await bot.send_message(chat_id=message.from_user.id, text=text, reply_markup=keyboard)

    elif message.text == '–ü–æ–ª–Ω–∞—è –≤–µ—Ä—Å–∏—è üíπ':
        # –°–æ–≤–µ—Ä—à–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º

        # prices
        PRICE = types.LabeledPrice(label='–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –ë–æ—Ç', amount=399 * 100)

        # buy
        if config['payments_token'].split(':')[1] == 'TEST':
            text = '–¢–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂'
            await bot.send_message(chat_id=message.from_user.id, text=text)

        await bot.send_invoice(chat_id=message.from_user.id,
                               title='–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –ë–æ—Ç',
                               description='–ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø–æ–∂–∏–∑–Ω–µ–Ω–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –ë–æ—Ç',
                               provider_token=config['payments_token'],
                               currency='rub',
                               photo_url='https://i.pinimg.com/736x/51/9e/53/519e53f3f72ba21337f84a9967f572cb.jpg',
                               photo_width=416,
                               photo_height=234,
                               photo_size=416,
                               is_flexible=False,
                               prices=[PRICE],
                               start_parameter='life_subscription',
                               payload='invoice_payload')

if __name__ == '__main__':
    # –°–æ–∑–¥–∞–µ–º —Ü–∏–∫–ª loop –∏ –∑–∞–ø—É—Å–∫–∞–µ–º 2 –∑–∞–¥–∞—á–∏
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)
    loop.create_task(check_subs_on_channel())

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Å—Å–∏—é —Å –ë–î PostgreSQL
    from DB import User
    from DB import get_session

    session = get_session()

    # –ó–∞–ø—É—Å–∫ –ë–æ—Ç–∞
    executor.start_polling(dp, skip_updates=False)
